#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const utils_1 = require("./utils");
const config_1 = require("./config");
const rootDir = process.cwd();
const configFilePath = path.join(rootDir, config_1.CONFIG_FILE_NAME);
const gitignorePath = path.join(rootDir, '.gitignore');
let timeout = null;
/**
 * Watches the specified files and directories for changes and updates the context file.
 *
 * @param config - The configuration object (now including everything from the root).
 */
const watchFiles = (config) => {
    const debounceUpdate = () => {
        if (timeout)
            clearTimeout(timeout);
        timeout = setTimeout(utils_1.generateContextFile, 50);
    };
    config.include.forEach(item => {
        const fullPath = path.join(rootDir, item);
        if (fs.existsSync(fullPath)) {
            if (fs.lstatSync(fullPath).isDirectory()) {
                fs.watch(fullPath, { recursive: true }, debounceUpdate);
            }
            else {
                fs.watchFile(fullPath, debounceUpdate);
            }
        }
    });
};
/**
 * Main function to run the script. This function:
 *   - Checks if the configuration file exists, and creates it if not.
 *   - Generates the context file from the entire project root.
 *   - Adds the configuration and output files to .gitignore.
 *   - Sets up file watchers so changes update the context file.
 */
const run = () => {
    if (!fs.existsSync(configFilePath)) {
        (0, utils_1.createDefaultConfig)(configFilePath);
    }
    (0, utils_1.generateContextFile)();
    (0, utils_1.addToGitignore)({ gitignorePath, entries: [config_1.CONFIG_FILE_NAME, config_1.OUTPUT_FILE_NAME] });
    const config = JSON.parse(fs.readFileSync(configFilePath, 'utf-8'));
    watchFiles(config);
    fs.watchFile(configFilePath, () => {
        const updatedConfig = JSON.parse(fs.readFileSync(configFilePath, 'utf-8'));
        watchFiles(updatedConfig);
        (0, utils_1.generateContextFile)();
    });
};
run();
